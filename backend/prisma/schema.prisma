// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PROJECT_OWNER
  INVESTOR
  ACCELERATOR
}

enum ProjectStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  REVIEWING
  INTERVIEWING
  ACCEPTED
  REJECTED
}

enum OrganizationType {
  VC
  ACCELERATOR
  PROJECT_TEAM
  DAO
}

enum BlockchainType {
  ETHEREUM
  BINANCE_SMART_CHAIN
  POLYGON
  SOLANA
  AVALANCHE
  OTHER
}

enum InvestmentType {
  EQUITY
  TOKEN
  HYBRID
  OTHER
}

enum CompanyStructure {
  LLC
  CORPORATION
  FOUNDATION
  DAO
  OTHER
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  avatar            String?
  role              UserRole  @default(PROJECT_OWNER)
  isEmailVerified   Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  organizations     OrganizationMember[]
  ownedOrganizations Organization[] @relation("OrganizationOwner")
  projects          Project[]
  formSubmissions   FormSubmission[]
  createdForms      Form[]

  @@map("users")
}

model Organization {
  id              String            @id @default(uuid())
  name            String
  description     String?
  logo            String?
  website         String?
  type            OrganizationType
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ownerId         String

  // Relations
  owner           User              @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members         OrganizationMember[]
  receivedApplications Application[] @relation("TargetOrganization")
  sentApplications Application[] @relation("ApplicantOrganization")
  
  @@map("organizations")
}

model OrganizationMember {
  id             String    @id @default(uuid())
  organizationId String
  userId         String
  role           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User        @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Project {
  id                  String          @id @default(uuid())
  name                String
  description         String?
  website             String?
  pitchDeckUrl        String?
  status              ProjectStatus   @default(DRAFT)
  blockchain          BlockchainType
  otherBlockchain     String?
  features            String[]        @default([])
  techStack           String
  security            String
  tgeDate            String?
  listingExchanges    String
  marketMaker         String?
  tokenomics          String
  previousFunding     String[]        @default([])
  fundingTarget       String
  investmentTypes     InvestmentType[] @default([])
  interestedVCs       String?
  keyMetrics          String
  requiredServices    String[]        @default([])
  serviceDetails      String
  additionalServices  String?
  companyStructure    CompanyStructure
  regulatoryCompliance String[]       @default([])
  legalAdvisor        String?
  complianceStrategy  String
  riskFactors         String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  ownerId             String

  // Relations
  owner               User            @relation(fields: [ownerId], references: [id])
  applications        Application[]   @relation("ProjectApplication")
  formSubmissions     FormSubmission[]

  @@map("projects")
}

model Form {
  id          String    @id @default(uuid())
  title       String
  description String?
  version     Int       @default(1)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String

  // Store form structure as JSON
  structure   Json    

  // Relations
  createdBy   User     @relation(fields: [createdById], references: [id])
  sections    FormSection[]
  submissions FormSubmission[]

  @@map("forms")
}

model FormSection {
  id          String    @id @default(uuid())
  formId      String
  title       String
  description String?
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  form        Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  questions   FormQuestion[]

  @@map("form_sections")
}

model FormQuestion {
  id          String    @id @default(uuid())
  sectionId   String
  text        String
  description String?
  type        String    // text, textarea, select, checkbox, radio, etc.
  isRequired  Boolean   @default(false)
  order       Int
  options     Json?     // For select, checkbox, radio options
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  section     FormSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("form_questions")
}

model FormSubmission {
  id          String    @id @default(uuid())
  formId      String
  userId      String
  projectId   String?
  formVersion Int
  data        Json      // Stores the answers to the form
  aiScore     Float?    // AI-generated score (if applicable)
  aiNotes     String?   // AI-generated notes or analysis
  status      String    @default("draft") // draft, submitted
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  form        Form      @relation(fields: [formId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
  applications Application[]

  @@map("form_submissions")
}

model Application {
  id                  String             @id @default(uuid())
  projectId           String
  formSubmissionId    String?
  applicantOrgId      String?           // If applying as an organization
  targetOrgId         String            // Organization being applied to (VC, accelerator)
  status              ApplicationStatus  @default(DRAFT)
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relations
  project             Project            @relation("ProjectApplication", fields: [projectId], references: [id])
  formSubmission      FormSubmission?    @relation(fields: [formSubmissionId], references: [id])
  applicantOrg        Organization?      @relation("ApplicantOrganization", fields: [applicantOrgId], references: [id])
  targetOrg           Organization       @relation("TargetOrganization", fields: [targetOrgId], references: [id])

  @@map("applications")
}
