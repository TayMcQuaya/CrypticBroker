generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model applications {
  id                                                       String            @id @default(uuid())
  projectId                                                String
  formSubmissionId                                         String?
  applicantOrgId                                           String?
  targetOrgId                                              String
  status                                                   ApplicationStatus @default(DRAFT)
  notes                                                    String?
  createdAt                                                DateTime          @default(now())
  updatedAt                                                DateTime          @updatedAt
  organizations_applications_applicantOrgIdToorganizations organizations?    @relation("applications_applicantOrgIdToorganizations", fields: [applicantOrgId], references: [id])
  form_submissions                                         form_submissions? @relation(fields: [formSubmissionId], references: [id])
  projects                                                 projects          @relation(fields: [projectId], references: [id])
  organizations_applications_targetOrgIdToorganizations    organizations     @relation("applications_targetOrgIdToorganizations", fields: [targetOrgId], references: [id])
}

model form_questions {
  id            String        @id @default(uuid())
  sectionId     String
  text          String
  description   String?
  type          String
  isRequired    Boolean       @default(false)
  order         Int
  options       Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  form_sections form_sections @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model form_sections {
  id             String           @id @default(uuid())
  formId         String
  title          String
  description    String?
  order          Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  form_questions form_questions[]
  forms          forms            @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model form_submissions {
  id           String         @id @default(uuid())
  formId       String
  userId       String
  projectId    String?
  formVersion  Int
  data         Json
  aiScore      Float?
  aiNotes      String?
  status       String         @default("draft")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  applications applications[]
  forms        forms          @relation(fields: [formId], references: [id])
  projects     projects?      @relation(fields: [projectId], references: [id])
  users        users          @relation(fields: [userId], references: [id])
}

model forms {
  id               String             @id @default(uuid())
  title            String
  description      String?
  version          Int                @default(1)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdById      String
  structure        Json
  form_sections    form_sections[]
  form_submissions form_submissions[]
  users            users              @relation(fields: [createdById], references: [id])
}

model organization_members {
  id             String        @id @default(uuid())
  organizationId String
  userId         String
  role           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizations  organizations @relation(fields: [organizationId], references: [id])
  users          users         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
}

model organizations {
  id                                                      String                 @id @default(uuid())
  name                                                    String
  description                                             String?
  logo                                                    String?
  website                                                 String?
  type                                                    OrganizationType
  createdAt                                               DateTime               @default(now())
  updatedAt                                               DateTime               @updatedAt
  ownerId                                                 String
  applications_applications_applicantOrgIdToorganizations applications[]         @relation("applications_applicantOrgIdToorganizations")
  applications_applications_targetOrgIdToorganizations    applications[]         @relation("applications_targetOrgIdToorganizations")
  organization_members                                    organization_members[]
  users                                                   users                  @relation(fields: [ownerId], references: [id])
}

model projects {
  id                   String             @id @default(uuid())
  name                 String
  description          String?
  website              String?
  pitchDeckUrl         String?
  coreFounders         String?
  projectHQ            String?
  status               ProjectStatus      @default(DRAFT)
  blockchain           BlockchainType?
  otherBlockchain      String?
  features             String[]           @default([])
  techStack            String?
  security             String?
  tgeDate              String?
  listingExchanges     String?
  marketMaker          String?
  totalSupply          String?
  circulatingSupply    String?
  vestingSchedule      String?
  tokenomics           String?
  tokenomicsMechanisms String?
  previousFunding      String[]           @default([])
  fundingTarget        String?
  investmentTypes      InvestmentType[]   @default([])
  interestedVCs        String?
  keyMetrics           String?
  requiredServices     String[]           @default([])
  serviceDetails       String?
  additionalServices   String?
  companyStructure     CompanyStructure?
  regulatoryCompliance String[]           @default([])
  legalAdvisor         String?
  complianceStrategy   String?
  riskFactors          String?
  uniquePosition       String?
  biggestChallenges    String?
  referralSource       String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  ownerId              String
  applications         applications[]
  form_submissions     form_submissions[]
  users                users              @relation(fields: [ownerId], references: [id])
}

model users {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  passwordHash         String
  firstName            String?
  lastName             String?
  avatar               String?
  role                 UserRole               @default(PROJECT_OWNER)
  isEmailVerified      Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  form_submissions     form_submissions[]
  forms                forms[]
  organization_members organization_members[]
  organizations        organizations[]
  projects             projects[]
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  REVIEWING
  INTERVIEWING
  ACCEPTED
  REJECTED
}

enum OrganizationType {
  VC
  ACCELERATOR
  PROJECT_TEAM
  DAO
}

enum ProjectStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  PROJECT_OWNER
  INVESTOR
  ACCELERATOR
}

enum BlockchainType {
  ETHEREUM
  BINANCE_SMART_CHAIN
  POLYGON
  SOLANA
  AVALANCHE
  OTHER
}

enum InvestmentType {
  EQUITY
  TOKEN
  HYBRID
  OTHER
}

enum CompanyStructure {
  LLC
  CORPORATION
  FOUNDATION
  DAO
  OTHER
}
