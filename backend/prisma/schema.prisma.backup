generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  passwordHash       String
  firstName          String?
  lastName           String?
  avatar             String?
  role               UserRole             @default(PROJECT_OWNER)
  isEmailVerified    Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  formSubmissions    FormSubmission[]
  createdForms       Form[]
  organizations      OrganizationMember[]
  ownedOrganizations Organization[]       @relation("OrganizationOwner")
  projects           Project[]

  @@map("users")
}

model Organization {
  id                   String               @id @default(uuid())
  name                 String
  description          String?
  logo                 String?
  website              String?
  type                 OrganizationType
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  ownerId              String
  sentApplications     Application[]        @relation("ApplicantOrganization")
  receivedApplications Application[]        @relation("TargetOrganization")
  members              OrganizationMember[]
  owner                User                 @relation("OrganizationOwner", fields: [ownerId], references: [id])

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(uuid())
  organizationId String
  userId         String
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Project {
  id              String           @id @default(uuid())
  name            String
  description     String?
  website         String?
  pitchDeckUrl    String?
  status          ProjectStatus    @default(DRAFT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ownerId         String
  applications    Application[]    @relation("ProjectApplication")
  formSubmissions FormSubmission[]
  owner           User             @relation(fields: [ownerId], references: [id])

  @@map("projects")
}

model Form {
  id          String           @id @default(uuid())
  title       String
  description String?
  version     Int              @default(1)
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdById String
  structure   Json
  sections    FormSection[]
  submissions FormSubmission[]
  createdBy   User             @relation(fields: [createdById], references: [id])

  @@map("forms")
}

model FormSection {
  id          String         @id @default(uuid())
  formId      String
  title       String
  description String?
  order       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  questions   FormQuestion[]
  form        Form           @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_sections")
}

model FormQuestion {
  id          String      @id @default(uuid())
  sectionId   String
  text        String
  description String?
  type        String
  isRequired  Boolean     @default(false)
  order       Int
  options     Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  section     FormSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("form_questions")
}

model FormSubmission {
  id           String        @id @default(uuid())
  formId       String
  userId       String
  projectId    String?
  formVersion  Int
  data         Json
  aiScore      Float?
  aiNotes      String?
  status       String        @default("draft")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  form         Form          @relation(fields: [formId], references: [id])
  project      Project?      @relation(fields: [projectId], references: [id])
  user         User          @relation(fields: [userId], references: [id])

  @@map("form_submissions")
}

model Application {
  id               String            @id @default(uuid())
  projectId        String
  formSubmissionId String?
  applicantOrgId   String?
  targetOrgId      String
  status           ApplicationStatus @default(DRAFT)
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  applicantOrg     Organization?     @relation("ApplicantOrganization", fields: [applicantOrgId], references: [id])
  formSubmission   FormSubmission?   @relation(fields: [formSubmissionId], references: [id])
  project          Project           @relation("ProjectApplication", fields: [projectId], references: [id])
  targetOrg        Organization      @relation("TargetOrganization", fields: [targetOrgId], references: [id])

  @@map("applications")
}

enum UserRole {
  ADMIN
  PROJECT_OWNER
  INVESTOR
  ACCELERATOR
}

enum ProjectStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  REVIEWING
  INTERVIEWING
  ACCEPTED
  REJECTED
}

enum OrganizationType {
  VC
  ACCELERATOR
  PROJECT_TEAM
  DAO
}
